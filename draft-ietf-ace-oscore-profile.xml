<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY SELF "[[this specification]]">
<!ENTITY I-D.ietf-core-object-security SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-core-object-security.xml">
<!ENTITY I-D.selander-ace-cose-ecdhe SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.selander-ace-cose-ecdhe.xml">
<!ENTITY I-D.ietf-ace-oauth-authz SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-ace-oauth-authz.xml">
<!ENTITY I-D.ietf-ace-oauth-params SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-ace-oauth-params.xml">
<!--<!ENTITY I-D.gerdes-ace-dcaf-authorize SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.gerdes-ace-dcaf-authorize.xml">-->
<!ENTITY I-D.ietf-ace-cwt-proof-of-possession SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-ace-cwt-proof-of-possession">
<!ENTITY RFC7800 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7800.xml"> 
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7252.xml">
<!ENTITY RFC8152 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8152.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!--<!ENTITY RFC7049 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7049.xml">-->
<!ENTITY RFC8610 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8610.xml">
<!ENTITY RFC7231 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY RFC8392 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8392.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-ace-oscore-profile-latest" category="std">

<front>

  <title abbrev="OSCORE Profile of ACE">OSCORE profile of the Authentication and Authorization for Constrained Environments Framework</title>


    <author initials="F." surname="Palombini" fullname="Francesca Palombini">
     <organization>Ericsson AB</organization>
      <address>
        <email>francesca.palombini@ericsson.com</email>
      </address>
    </author>
  <author fullname="Ludwig Seitz" initials="L." surname="Seitz">
      <organization>Combitech</organization>
      <address>
        <postal>
          <street>Djäknegatan 31</street>
          <!-- Reorder these if your country does things differently -->
          <city>Malmö</city>
          <code>211 35</code>
          <country>Sweden</country>
        </postal>
        <email>ludwig.seitz@combitech.se</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
      <author fullname="Göran Selander" initials="G." surname="Selander">
      <organization>Ericsson AB</organization>
      <address>
        <email>goran.selander@ericsson.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
  <author fullname="Martin Gunnarsson" initials="M." surname="Gunnarsson">
      <organization>RISE</organization>
      <address>
        <postal>
          <street>Scheelevagen 17</street>
          <!-- Reorder these if your country does things differently -->
          <city>Lund</city>
          <code>22370</code>
          <country>Sweden</country>
        </postal>
        <email>martin.gunnarsson@ri.se</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>


    <date/>

    <area>Security</area>
    <workgroup>ACE Working Group</workgroup>
    <abstract>
      <t>
        This memo specifies a profile for the Authentication and Authorization for Constrained Environments (ACE) framework.  It utilizes Object Security for Constrained RESTful Environments (OSCORE) to provide communication security, server authentication, and proof-of-possession for a key owned by the client and bound to an OAuth 2.0 access token.
      </t>
      <!-- 
        Jim: Lookup on the RFC Editor page if you need to expand OAuth

        From editor's list of well known:
        OAuth     *- [seems to be more of a name rather than an abbreviation] 
      -->
    </abstract>

  </front>

  <middle>

    <section anchor="introduction" title=" Introduction"> 
      
      <t>
        This memo specifies a profile of the ACE framework <xref target="I-D.ietf-ace-oauth-authz"/>.  In this profile, a client and a resource server use CoAP <xref target="RFC7252"/> to communicate.  The client uses an access token, bound to a key (the proof-of-possession key) to authorize its access to the resource server.  Note that this profile uses a symmetric-crypto-based scheme, where the symmetric secret is used as input material for keying material derivation.  In order to provide communication security, proof of possession, and server authentication the client and resource server use Object Security for Constrained RESTful Environments (OSCORE) <xref target="I-D.ietf-core-object-security"/>.  Note that the proof of possession is not done by a dedicated protocol element, but rather occurs implicitly, based on knowledge of the security keying material.
      </t>

      <t>
        OSCORE specifies how to use CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> to secure CoAP messages.
        Note that OSCORE can be used to secure CoAP messages, as well as HTTP and combinations of HTTP and CoAP; a profile of ACE similar to the one described in this document, with the difference of using HTTP instead of CoAP as communication protocol, could be specified analogously to this one.
      </t>

      <section anchor="terminology" title=" Terminology">

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
      "MAY", and "OPTIONAL" in this document are to be interpreted as
      described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
      appear in all capitals, as shown here.
        </t>

        <t>
          Certain security-related terms such as "authentication", "authorization", "confidentiality", "(data) integrity", "message  authentication code", and "verify" are taken from <xref target="RFC4949"/>.
        </t>

        <t>
          RESTful terminology follows HTTP <xref target="RFC7231"/>.
        </t>

        <t>
          Terminology for entities in the architecture is defined in OAuth 2.0 <xref target="RFC6749"/>, such as client (C), resource server (RS), and authorization server (AS). It is assumed in this document that a given resource on a specific RS is associated to a unique AS.
        </t>

        <t>
          Concise Data Definition Language (CDDL) <xref target="RFC8610"/> is used in this specification.
        </t>

        <t>
          Note that the term "endpoint" is used here, as in <xref target="I-D.ietf-ace-oauth-authz"/>, following its OAuth definition, which is to denote resources such as token and introspect at the AS and authz-info at the RS.  The CoAP <xref target="RFC7252"/> definition, which is "An entity participating in the CoAP protocol" is not used in this memo.
        </t> 
        <!-- UNDONE: changed the above to "resource" in the whole doc-->

      </section> <!-- ends from line 117-->
    </section> <!-- ends from line 106-->

    <section title="Protocol Overview"> 
    
      <t>
        This section gives an overview on how to use the ACE Framework <xref target="I-D.ietf-ace-oauth-authz"/> to secure the communication between a client and a resource server using OSCORE <xref target="I-D.ietf-core-object-security"/>. The parameters needed by the client to negotiate the use of this profile with the authorization server, as well as OSCORE setup process, are described in detail in the following sections.
      </t>

      <t>
        This profile requires a client to retrieve an access token from the AS for the resource it wants to access on a RS, using the token endpoint, as specified in section 5.6 of <xref target="I-D.ietf-ace-oauth-authz"/>.  To determine the AS in charge of a resource hosted at the RS, the client C MAY send an initial Unauthorized Resource Request message to the RS. The RS then denies the request and sends the address of its AS back to the client C as specified in section 5.1 of <xref target="I-D.ietf-ace-oauth-authz"/>. The access token request and response MUST be confidentiality-protected and ensure authenticity.  This profile RECOMMENDS the use of OSCORE between client and AS, but other protocols (such as TLS or DTLS) can be used as well.
      </t>

      <t>
        Once the client has retrieved the access token, it generates a nonce N1 and posts both the token and N1 to the RS using the authz-info endpoint and mechanisms specified in section 5.8 of <xref target="I-D.ietf-ace-oauth-authz"/> and Content-Format = application/ace+cbor. Note that, as specified in the ACE framework, the authz-info endpoint is not a protected resource, so there is no cryptographic protection to this request.
      </t>

      <t>
        If the access token is valid, the RS replies to this request with a 2.01 (Created) response with Content-Format = application/ace+cbor, which contains a nonce N2 in a CBOR map. Moreover, the server concatenates N1 with N2 and appends the result to the Master Salt in the Security Context (see section 3 of <xref target="I-D.ietf-core-object-security"/>). The RS then derives the complete Security Context associated with the received token from it plus the parameters received in the AS, following section 3.2 of <xref target="I-D.ietf-core-object-security"/>.
      </t>

      <t>
        After receiving the nonce N2, the client concatenates it with N1 and appends the result to the Master Salt in its Security Context (see section 3 of <xref target="I-D.ietf-core-object-security"/>). The client then derives the complete Security Context from the nonces plus the parameters received from the AS.
      </t>

      <t>
        Finally, the client sends a request protected with OSCORE to the RS. If the request verifies, then this Security Context is stored in the server, and used in the response, and in further communications with the client, until token expiration. This Security Context is discarded if the same token is re-used to successfully derive a new Security Context. 
      </t>

      <t>
        The use of random nonces during the exchange prevents the reuse of AEAD nonces and keys with different messages, in case of re-derivation of the Security Context both for Clients and Resource Servers from an old non-expired access token, e.g., in case of re-boot of either the client or RS. In fact, by using random nonces as part of the Master Salt, the request to the authz-info endpoint posting the same token results in a different Security Context, since, even though the Master Secret, Sender ID and Recipient ID are the same, the Master Salt is different. Therefore, the main requirement for the nonces is that they have a good amount of randomness. If random nonces were not used, a node re-using a non-expired old token would be susceptible to on-path attackers provoking the creation of OSCORE messages using old AEAD keys and nonces.
      </t>

      <t>
        An overview of the profile flow for the OSCORE profile is given in <xref target="prof-overview"/>.
      </t>


      <figure anchor="prof-overview" title="Protocol Overview">
        <artwork><![CDATA[
   C                            RS                   AS
   | [-- Resource Request --->] |                     |
   |                            |                     |
   | [<---- AS Request  ------] |                     |
   |      Creation Hints        |                     |
   |                            |                     |
   | ----- POST /token  ----------------------------> |
   |                            |                     |
   | <---------------------------- Access Token ----- |
   |                           + Access Information   |
   | ---- POST /authz-info ---> |                     |
   |     (access_token, N1)     |                     |
   |                            |                     |
   | <--- 2.01 Created (N2) --- |                     |
   |                            |                     |
 /Sec Context             /Sec Context                |
   Derivation/              Derivation/               |
   |                            |                     |
   | ---- OSCORE Request -----> |                     |
   |                            |                     |
   | <--- OSCORE Response ----- |                     |
   |                            |                     |
   | ---- OSCORE Request -----> |                     |
   |                            |                     |
   | <--- OSCORE Response ----- |                     |
   |           ...              |                     |
]]>
        </artwork>
      </figure>

    </section> <!-- closes from line 142 -->
    

    <section anchor="client-as" title="Client-AS Communication"> 

      <t>
        The following subsections describe the details of the POST request and response to the token endpoint between client and AS. Section 3.2 of <xref target="I-D.ietf-core-object-security"/> defines how to derive a Security Context based on a shared master secret and a set of other parameters, established between client and server, which the client receives from the AS in this exchange.  The proof-of-possession key (pop-key) included in the response from the AS MUST be used as master secret in OSCORE.
      </t>

      <section anchor="c-as" title="C-to-AS: POST to token endpoint"> 

        <t>
          The client-to-AS request is specified in Section 5.6.1 of <xref target="I-D.ietf-ace-oauth-authz"/>.
        </t>

        <t>
          The client MUST send this POST request to the token endpoint over a secure channel that guarantees authentication, message integrity and confidentiality (see <xref target="introsp"/>). 
        </t>

        <t>
          An example of such a request, with payload in CBOR diagnostic notation without the tag and value abbreviations is reported in <xref target="ex0"/>
        </t>

        <figure anchor="ex0" title="Example C-to-AS POST /token request for an access token bound to a symmetric key.">
          <artwork><![CDATA[
    Header: POST (Code=0.02)
    Uri-Host: "as.example.com"
    Uri-Path: "token"
    Content-Format: "application/ace+cbor"
    Payload:
    {
      "req_aud" : "tempSensor4711",
      "scope" : "read"
     }
]]>
          </artwork>
        </figure>
      
        <t>
          If the client wants to update its access rights without changing an existing OSCORE Security Context, it MUST include in its POST request to the token endpoint a req_cnf object. The req_cnf MUST include a kid field carrying a CBOR array object containing the client's identifier (assigned in <xref target="as-c"/>) and optionally the context identifier (if assigned in <xref target="as-c"/>). The CBOR array is defined in <xref target="kid"/>, and follows the notation of <xref target="RFC8610"/>. These identifiers can be used by the AS to determine the shared secret bound to the proof-of-possession token and therefore MUST identify a symmetric key that was previously generated by the AS as a shared secret for the communication between the client and the RS. The AS MUST verify that the received value identifies a proof-of-possession key that has previously been issued to the requesting client. If that is not the case, the Client-to-AS request MUST be declined with the error code 'invalid_request' as defined in Section 5.6.3 of <xref target="I-D.ietf-ace-oauth-authz"/>.
        </t>

        <figure anchor="kid" title="CDDL Notation of kid for Update of Access Rights">
          <artwork><![CDATA[
    kid = [ 
      clientId, 
      ?IdContext
      ]
]]>
          </artwork>
        </figure>

        <t>
          An example of such a request, with payload in CBOR diagnostic notation without the tag and value abbreviations is reported in <xref target="ex7"/>
        </t>

        <figure anchor="ex7" title="Example C-to-AS POST /token request for updating rights to an access token bound to a symmetric key.">
          <artwork><![CDATA[
    Header: POST (Code=0.02)
    Uri-Host: "as.example.com"
    Uri-Path: "token"
    Content-Format: "application/ace+cbor"
    Payload:
    {
      "req_aud" : "tempSensor4711",
      "scope" : "write",
      "req_cnf" : {
        "kid" : ["myclient","contextid1"]
     }
]]>
          </artwork>
        </figure>
      

      </section> <!-- closes from line 227 -->

      <section anchor="as-c" title="AS-to-C: Access Token"> 

        <t>
          After verifying the POST request to the token endpoint and that the client is authorized to obtain an access token corresponding to its access token request, the AS responds as defined in section 5.6.2 of <xref target="I-D.ietf-ace-oauth-authz"/>. If the client request was invalid, or not authorized, the AS returns an error response as described in section 5.6.3 of <xref target="I-D.ietf-ace-oauth-authz"/>.
        </t>

        <t>
          The AS can signal that the use of OSCORE is REQUIRED for a specific access token by including the "profile" parameter with the value "coap_oscore" in the access token response.  This means that the client MUST use OSCORE towards all resource servers for which this access token is valid, and follow <xref target="oscore-setup"/> to derive the security context to run OSCORE.
Usually it is assumed that constrained devices will be pre-configured with the necessary profile, so that this kind of profile negotiation can be omitted.	  
        </t>

        <t>
          Moreover, the AS MUST send the following data:
        </t>

        <t>
          <list style="symbols">
            <t>a master secret</t>
            <t>a server identifier</t>
          </list>
        </t>

        <t>
          Additionally, the AS MAY send the following data, in the same response. 
        </t>

        <t>
          <list style="symbols">
            <t>a client identifier</t>
            <t>a context identifier</t>
            <t>an AEAD algorithm</t>
            <t>an HKDF algorithm</t>
            <t>a salt</t>
            <t>a replay window type and size</t>
          </list>
        </t>

        <t>
          The OSCORE_Security_Context is a CBOR map object, defined in <xref target="oscore-sec-ctx"/>.
          The master secret MUST be communicated as the 'ms' field in the OSCORE_Security_Context field in the 'cnf' parameter of the access token response as defined in Section 3.2 of <xref target="I-D.ietf-ace-oauth-params"/>.
          The AEAD algorithm MAY be included as the 'alg' parameter in the OSCORE_Security_Context; the HKDF algorithm MAY be included
      	  as the 'hkdf' parameter of the OSCORE_Security_Context, a salt MAY be included as the 'salt' parameter of the
      	  OSCORE_Security_Context, and the replay window type and size MAY be included as the 'rpl' of the OSCORE_Security_Context, as defined in <xref target="oscore-sec-ctx"/>.
        </t>
	      
        <t>
        	The same parameters MUST be included as part of the access token. This profile RECOMMENDS the use of CBOR web token (CWT) as specified in  <xref target="RFC8392"/>. If the token is a CWT, the same OSCORE_Security_Context structure defined above MUST be placed in the 'cnf' claim of this token. 
	      </t>

        <t>
          The AS MUST also assign an identifier to the RS (serverId), MAY assign an identifier to the client (clientId), and MAY assign an identifier to the context (contextId). These identifiers are then used as Sender ID, Recipient ID and ID Context in the OSCORE context as described in section 3.1 of <xref target="I-D.ietf-core-object-security"/>.  The pair (client identifier, context identifier) MUST be unique in the set of all clients for a single RS.  Moreover, clientId, serverId and (when assigned) contextId MUST be included in the OSCORE_Security_Context, as defined in <xref target="oscore-sec-ctx"/>.
        </t>

        <t>
          We assume in this document that a resource is associated to one single AS, which makes it possible to assume unique identifiers for each client requesting a particular resource to a RS.  If this is not the case, collisions of identifiers may appear in the RS, in which case the RS needs to have a mechanism in place to disambiguate identifiers or mitigate their effect.
          <!-- TODO: Add error response definition in the document for the RS to indicate "Id collision"-->
        </t>

        <t>
          Note that in <xref target="oscore-setup"/> C sets the Sender ID of its Security Context to the clientId value received and the Recipient ID to the serverId value, and RS does the opposite.
        </t>

        <t>
          <xref target="ex1"/> shows an example of such an AS response, with payload in CBOR diagnostic notation without the tag and value abbreviations.
        </t>

        <figure anchor="ex1" title="Example AS-to-C Access Token response with OSCORE profile.">
          <artwork><![CDATA[
    Header: Created (Code=2.01)
    Content-Type: "application/ace+cbor"
    Payload:
    {
      "access_token" : h'a5037674656d7053656e73 ...'
       (remainder of access token omitted for brevity)',
      "profile" : "coap_oscore",
      "expires_in" : "3600",
      "cnf" : {
        "OSCORE_Security_Context" : {
          "alg" : "AES-CCM-16-64-128",
          "clientId" : b64'qA',
          "serverId" : b64'Qg',
          "ms" : h'f9af838368e353e78888e1426bd94e6f' 
        }
      }
    }
]]>
          </artwork>
        </figure>

        <t>
          <xref target="ex2"/> shows an example CWT, containing the necessary OSCORE parameters in the 'cnf' claim, in CBOR diagnostic notation without tag and value abbreviations.
        </t>

        <figure anchor="ex2" title="Example CWT with OSCORE parameters.">
          <artwork><![CDATA[
  {
    "aud" : "tempSensorInLivingRoom",
    "iat" : "1360189224",
    "exp" : "1360289224",
    "scope" :  "temperature_g firmware_p",
    "cnf" : {
      "OSCORE_Security_Context" : {
        "alg" : "AES-CCM-16-64-128",
        "clientId" : h'636C69656E74',
        "serverId" : h'736572766572',
        "ms" : h'f9af838368e353e78888e1426bd94e6f' 
    }
  }
]]>
          </artwork>
        </figure>


        <t>
          The same CWT token as in <xref target="ex2"/>, using the value abbreviations defined in <xref target="I-D.ietf-ace-oauth-authz"/> and <xref target="I-D.ietf-ace-cwt-proof-of-possession"/> and encoded in CBOR is shown in <xref target="ex2-cbor"/>.
        </t>

        <t>
          NOTE TO THE RFC EDITOR: before publishing, it should be checked (and in case fixed) that the values used below (which are not yet registered) are the final values registered in IANA.
        </t>

        <figure anchor="ex2-cbor" title="Example CWT with OSCORE parameters.">
          <artwork><![CDATA[
A5                                      # map(5)
   03                                   # unsigned(3)
   76                                   # text(22)
      74656D7053656E736F72496E4C6976696E67526F6F6D 
                                        # "tempSensorInLivingRoom"
   06                                   # unsigned(6)
   1A 5112D728                          # unsigned(1360189224)
   04                                   # unsigned(4)
   1A 51145DC8                          # unsigned(1360289224)
   09                                   # unsigned(9)
   78 18                                # text(24)
      74656D70657261747572655F67206669726D776172655F70 
                                        # "temperature_g firmware_p"
   08                                   # unsigned(8)
   A1                                   # map(1)
      04                                # unsigned(4)
      A4                                # map(4)
         05                             # unsigned(5)
         0A                             # unsigned(10)
         02                             # unsigned(2)
         46                             # bytes(6)
            636C69656E74                # "client"
         03                             # unsigned(3)
         46                             # bytes(6)
            736572766572                # "server"
         01                             # unsigned(1)
         50                             # bytes(16)
            F9AF838368E353E78888E1426BD94E6F 
                                        # "\xF9\xAF\x83\x83h\xE3S\xE7
                                           \x88\x88\xE1Bk\xD9No"

]]>
          </artwork>
        </figure>


        <t>
          If the client has requested an update to its access rights using the same OSCORE Security Context, which is valid and authorized, the AS MUST omit the 'cnf' parameter in the response, and MUST carry the client identifier and optionally the context identifier in the 'kid' field in the 'cnf' parameter of the token, with the same structure defined in <xref target="kid"/>. These identifiers need to be included in the response, in order for the RS to identify the previously generated Security Context.
        </t>

        <t>
          <xref target="ex5"/> shows an example of such an AS response, with payload in CBOR diagnostic notation without the tag and value abbreviations.
        </t>

        <figure anchor="ex5" title="Example AS-to-C Access Token response with OSCORE profile, for update of access rights.">
          <artwork><![CDATA[
    Header: Created (Code=2.01)
    Content-Type: "application/ace+cbor"
    Payload:
    {
      "access_token" : h'a5037674656d7053656e73 ...'
       (remainder of access token omitted for brevity)',
      "profile" : "coap_oscore",
      "expires_in" : "3600"
    }
]]>
          </artwork>
        </figure>

        <t>
          <xref target="ex6"/> shows an example CWT, containing the necessary OSCORE parameters in the 'cnf' claim for update of access rights, in CBOR diagnostic notation without tag and value abbreviations.
        </t>

        <figure anchor="ex6" title="Example CWT with OSCORE parameters for update of access rights.">
          <artwork><![CDATA[
  {
    "aud" : "tempSensorInLivingRoom",
    "iat" : "1360189224",
    "exp" : "1360289224",
    "scope" :  "temperature_h",
    "cnf" : {
      "kid" : b64'qA'
    }
  }
]]>
          </artwork>
        </figure>

        <!-- Client rejecting OSCORE_Security_Context if invalid <- This is not done as the client does not verify the token, so it would be easy for an attacker to interrupt ACE by just injecting unexisting fields.
        <t>
          When receiving the access token response, the client MUST verify the OSCORE_Security_Context. If any of the expected parameters in the OSCORE_Security_Context is missing (e.g. any of the mandatory parameters from the AS), or if any parameters received in the OSCORE_Security_Context is unrecognized, the client MUST NOT continue processing, and MAY attempt to retrieve a new token from the AS.
        <t>
        -->

        <section anchor="oscore-sec-ctx" title="OSCORE_Security_Context Object">

          <t>
            An OSCORE_Security_Context is an object that represents part or all of an OSCORE Security Context (Section 3.1 of <xref target="I-D.ietf-core-object-security"/>).  The OSCORE_Security_Context object can either be encoded as a JSON object or as a CBOR map. In both cases, the set of common parameters that can appear in an OSCORE_Security_Context object can be found in the IANA "OSCORE Security Context Parameters" registry (<xref target="sec-ctx-params-reg"/>) and is defined below.
            All parameters are optional.
            <xref target="table-key-labels"/> provides a summary of the OSCORE_Security_Context parameters defined in this section.
          </t>

          <texttable title="OSCORE_Security_Context Parameters" anchor="table-key-labels">
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>CBOR label</ttcol>
            <ttcol align='left' width="14em">CBOR type</ttcol>
            <ttcol align='left'>registry</ttcol>
            <ttcol align='left'>description</ttcol>
            
            <c>ms</c>        <c>1</c>        <c>bstr</c>  <c></c>        <c>OSCORE Master Secret value</c>
            <c>clientId</c>        <c>2</c>        <c>bstr</c>        <c></c>        <c>OSCORE Sender ID value of the client, OSCORE Recipient ID value of the server</c>
            <c>serverId</c>        <c>3</c>        <c>bstr</c>        <c></c>        <c>OSCORE Sender ID value of the server, OSCORE Recipient ID value of the client</c>
            <c>hkdf</c>        <c>4</c>        <c>bstr / int</c>        <c>COSE Algorithm Values (HMAC-based)</c>        <c>OSCORE HKDF value</c>
            <c>alg</c>        <c>5</c>        <c>tstr / int</c>  <c>COSE Algorithm Values (AEAD)</c>        <c>OSCORE AEAD Algorithm value</c>
            <c>salt</c>        <c>6</c>        <c>bstr</c>        <c></c>        <c>OSCORE Master Salt value</c>
            <c>contextId</c>        <c>7</c>        <c>bstr</c>        <c></c>        <c>OSCORE ID Context value</c>
            <c>rpl</c>    <c>8</c>        <c>bstr / int</c> <c></c>     <c>OSCORE Replay Window Type and Size</c>
            <!--<c>exp</c>    <c>9</c>        <c>int / float</c> <c></c>     <c>OSCORE Security Context Expiration Time</c> -->
          </texttable>


          <t>
            <list style="hanging">
              <t hangText="ms:">
                This parameter identifies the OSCORE Master Secret value, which is a byte string. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>.
                In JSON, the "ms" value is a Base64 encoded byte string.
                In CBOR, the "ms" type is bstr, and has label 1.
              </t>

              <t hangText="clientId:">
                This parameter identifies a client identifier as a byte string. This identifier is used as OSCORE Sender ID in the client and OSCORE Recipient ID in the server. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>.
                In JSON, the "clientId" value is a Base64 encoded byte string.
                In CBOR, the "clientId" type is bstr, and has label 2.
              </t>

              <t hangText="serverId:">
                This parameter identifies a server identifier as a byte string. This identifier is used as OSCORE Sender ID in the server and OSCORE Recipient ID in the client. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>.
                In JSON, the "serverId" value is a Base64 encoded byte string.
                In CBOR, the "serverId" type is bstr, and has label 3.
              </t>
              
              <t hangText="hkdf:">
                This parameter identifies the OSCORE HKDF Algorithm. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>. 
                The values used MUST be registered in the IANA "COSE Algorithms" registry and MUST be HMAC-based HKDF algorithms. The value can either be the integer or the text string value of the HMAC-based HKDF algorithm in the "COSE Algorithms" registry.
                In JSON, the "hkdf" value is a case-sensitive ASCII string or an integer.
                In CBOR, the "hkdf" type is tstr or int, and has label 4.
              </t>

              <t hangText="alg:">
                This parameter identifies the OSCORE AEAD Algorithm. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>
                The values used MUST be registered in the IANA "COSE Algorithms" registry and MUST be AEAD algorithms. The value can either be the integer or the text string value of the HMAC-based HKDF algorithm in the "COSE Algorithms" registry.
                In JSON, the "alg" value is a case-sensitive ASCII string or an integer.
                In CBOR, the "alg" type is tstr or int, and has label 5.
              </t>

              <t hangText="salt:">
                This parameter identifies the OSCORE Master Salt value, which is a byte string. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>.
                In JSON, the "salt" value is a Base64 encoded byte string.
                In CBOR, the "salt" type is bstr, and has label 6.
              </t>

              <t hangText="contextId:">
                This parameter identifies the security context as a byte string. This identifier is used as OSCORE ID Context. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>.
                In JSON, the "contextID" value is a Base64 encoded byte string.
                In CBOR, the "contextID" type is bstr, and has label 7.
              </t>

              <t hangText="rpl:">
                This parameter is used to carry the OSCORE value, encoded as a bstr.
                This parameter identifies the OSCORE Replay Window Size and Type value, which is a byte string. For more information about this field, see section 3.1 of <xref target="I-D.ietf-core-object-security"/>.
                In JSON, the "rpl" value is a Base64 encoded byte string.
                In CBOR, the "rpl" type is bstr, and has label 8.
              </t>

              <!--<t hangText="exp:">
                This parameter is used to carry the expiration time, encoded as an integer or floating-point number.
                This parameter, when used, identifies the expiration time on or after which the Security Context MUST NOT be used.
                The processing of the exp value requires that the current date/time MUST be before the expiration date/time listed in the "exp" parameter.
                Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. 
                In JSON, the "exp" value is a NumericDate value, as defined in {{RFC8392}}.
                In CBOR, the "exp" type is int or float, and has label 9.
              </t>-->
              
            </list>
          </t>

          <t>
            An example of JSON OSCORE_Security_Context is given in <xref target="JSON-osc"/>.
          </t>

          <figure anchor="JSON-osc" title="Example JSON OSCORE_Security_Context object">
            <artwork><![CDATA[
        "OSCORE_Security_Context" : {
          "alg" : "AES-CCM-16-64-128",
          "clientId" : b64'qA',
          "serverId" : b64'Qg',
          "ms" : b64'+a+Dg2jjU+eIiOFCa9lObw'
        }
  ]]>
            </artwork>
          </figure>

          <t>
            The CDDL grammar describing the CBOR OSCORE_Security_Context object is:
          </t>

          <figure><artwork type="CDDL"><![CDATA[
OSCORE_Security_Context = {
    ? 1 => bstr,              ; ms
    ? 2 => bstr,              ; clientId
    ? 3 => bstr,              ; serverId
    ? 4 => tstr / int,        ; hkdf
    ? 5 => tstr / int,        ; alg
    ? 6 => bstr,              ; salt
    ? 7 => bstr,              ; contextId
    ? 8 => bstr / tstr,       ; rpl
    * int / tstr => any
}
]]></artwork></figure>

        </section>

      </section> <!-- ends for line 266-->
    
    </section> <!-- ends for line 221 -->

    <section anchor="c-rs1" title="Client-RS Communication">

      <t>
        The following subsections describe the details of the POST request and response to the authz-info endpoint between client and RS. The client generates a nonce N1 and posts it together with the token that includes the materials received from the AS to the RS. The RS then generates a nonce N2 and use Section 3.2 of <xref target="I-D.ietf-core-object-security"/> to derive a security context based on a shared master secret and the two nonces, established between client and server. 
      </t>

      <t>
        Note that the proof-of-possession required to bind the access token to the
        client is implicitly performed by generating the shared OSCORE Security Context using
        the pop-key as master secret, for both client and RS.  An attacker
        using a stolen token will not be able to generate a valid OSCORE context and
        thus not be able to prove possession of the pop-key.
      </t>


      <section anchor="c-rs" title="C-to-RS: POST to authz-info endpoint">

        <t>
          The client MUST generate a nonce N1 very unlikely to have been previously used with the same input keying material. This profile RECOMMENDS to use a 64-bit long random number as nonce. The client MUST store this nonce as long as the response from the RS is not received and the access token related to it is still valid. The client MUST use CoAP and the Authorization Information resource as described in section 5.8.1 of <xref target="I-D.ietf-ace-oauth-authz"/> to transport the token and N1 to the RS.
        </t>
        <t>
           Note that the use of the payload and the Content-Format is different from what described in section 5.8.1 of <xref target="I-D.ietf-ace-oauth-authz"/>, which only transports the token without any CBOR wrapping. In this profile, the client MUST wrap the token and N1 in a CBOR map. The client MUST use the Content-Format "application/ace+cbor" defined in section 8.14 of <xref target="I-D.ietf-ace-oauth-authz"/>. The client MUST include the access token using the correct CBOR label (e.g., "cwt" for CWT, "jwt" for JWT) and N1 using the 'cnonce' parameter defined in section 5.1.2 of <xref target="I-D.ietf-ace-oauth-authz"/>.
        </t>

        <t>
          The authz-info endpoint is not protected, nor are the responses from this resource.
        </t>

        <t>
          The access token MUST be encrypted, since it is
          transferred from the client to the RS over an unprotected channel.
        </t>

        <t>
        	Note that a client may be required to re-POST the access token, since an RS may delete a stored access token, due to lack of memory.
        </t>

        <t>
          <xref target="ex3"/> shows an example of the request sent from the client to the RS, with payload in CBOR diagnostic notation without the tag and value abbreviations.
        </t>

        <figure anchor="ex3" title="Example C-to-RS POST /authz-info request using CWT">
          <artwork><![CDATA[
      Header: POST (Code=0.02)
      Uri-Host: "rs.example.com"
      Uri-Path: "authz-info"
      Content-Format: "application/ace+cbor"
      Payload:
        {
          "access_token": h'a5037674656d7053656e73 ...'
       (remainder of access token omitted for brevity)',
          "cnonce": h'018a278f7faab55a'
        }
  ]]>
          </artwork>
        </figure>

      </section> <!-- ends for line 418 -->

      <section anchor="rs-c" title="RS-to-C: 2.01 (Created)">

        <t>
          The RS MUST follow the procedures defined in section 5.8.1 of <xref target="I-D.ietf-ace-oauth-authz"/>: the RS MUST verify the validity of the token. If the token is valid, the RS MUST respond to the POST request with 2.01 (Created). If the token is valid but is associated to claims that the RS cannot process (e.g., an unknown scope), or if any of the expected parameters in the OSCORE_Security_Context is missing (e.g., any of the mandatory parameters from the AS), or if any parameters received in the OSCORE_Security_Context is unrecognized, the RS MUST respond with an error response code equivalent to the CoAP code 4.00 (Bad Request). In the latter two cases, the RS MAY provide additional information in the error response, in order to clarify what went wrong.
          The RS MAY make an introspection request to validate the token before responding to the POST request to the authz-info endpoint. 
        </t>

        <t>
          Additionally, the RS MUST generate a nonce N2 very unlikely to have been previously used with the same input keying material, and send it within the 2.01 (Created) response. The payload of the 2.01 (Created) response MUST be a CBOR map containing the 'cnonce' parameter defined in section 5.1.2 of <xref target="I-D.ietf-ace-oauth-authz"/>, set to N2. This profile RECOMMENDS to use a 64-bit long random number as nonce. Moreover, if the OSCORE_Security_Context in the token did not contain a 'clientId' parameter, the RS MUST generate an identifier, unique in the set of all its existing client identifiers, and send it in a 'clientId' parameter in the CBOR map as a CBOR bstr. The RS MAY generate and send a 'ClientId' identifier even though the OSCORE_Security_Context contained such a parameter, in order to guarantee the uniqueness of the client identifier. The RS MUST use the Content-Format "application/ace+cbor" defined in section 8.14 of <xref target="I-D.ietf-ace-oauth-authz"/>.
        </t>

<!--     
        <t>
        	Note that, when using this profile, an identifier of the token (e.g., the cti for a CWT) is not transported in the payload of this request, as section 5.8.1 of <xref target="I-D.ietf-ace-oauth-authz"/> allows. 
        </t> 
-->

        <t>
          <xref target="ex4"/> shows an example of the response sent from the RS to the client, with payload in CBOR diagnostic notation without the tag and value abbreviations.
        </t>

        <figure anchor="ex4" title="Example RS-to-C 2.01 (Created) response">
          <artwork><![CDATA[
      Header: Created (Code=2.01)
      Content-Format: "application/ace+cbor"
      Payload:
        {
          "cnonce": h'25a8991cd700ac01'
        }
  ]]>
          </artwork>
        </figure>

        <t>
          When receiving an updated access token with updated authorization information from the client (see <xref target="c-as"/>), it is RECOMMENDED that the RS overwrites the previous token, that is only the latest authorization information in the token received by the RS is valid. This simplifies for the RS to keep track of authorization information for a given client. 
        </t>
        
        <t>
          As specified in section 5.8.3 of <xref target="I-D.ietf-ace-oauth-authz"/>, the RS MUST notify the client with an error response with code 4.01 (Unauthorized) for any long running request before terminating the session, when the access token expires.
        </t>

      </section> <!-- ends for line 452-->

      <section anchor="oscore-setup" title="OSCORE Setup">

        <t>
          Once receiving the 2.01 (Created) response from the RS, following the POST request to authz-info endpoint, the client MUST extract the nonce N2 from the 'cnonce' parameter and the client identifier from the 'clientId' in the CBOR map in the payload of the response. Then, the client MUST set the Master Salt of the Security Context created to communicate with the RS to the concatenation of salt, N1, and N2, in this order: Master Salt = salt | N1 | N2, where | denotes byte string concatenation, and where salt was received from the AS in <xref target="as-c"/>. The client MUST set the Master Secret and Recipient ID from the parameters received from the AS in <xref target="as-c"/>. The client MUST set the AEAD Algorithm, ID Context, HKDF, and Replay Window from the parameters received from the AS in <xref target="as-c"/>, if present. In case these parameters are omitted, the default values are used as described in section 3.2 of <xref target="I-D.ietf-core-object-security"/>. The client MUST set the Sender ID from the 'clientId in the 2.01 (Created) response, if present; otherwise, the client MUST set the Sender ID from the parameters received from the AS in <xref target="as-c"/>. After that, the client MUST derive the complete Security Context following section 3.2.1 of <xref target="I-D.ietf-core-object-security"/>. From this point on, the client MUST use this Security Context to communicate with the RS when accessing the resources as specified by the authorization information.
        </t>

        <t>
          If any of the expected parameters is missing (e.g., any of the mandatory parameters from the AS, or the 'clientId', either received from the AS or in the 2.01 (Created) response from the RS), the client MUST stop the exchange, and MUST NOT derive the Security Context. The client MAY restart the exchange, to get the correct security material.
        </t>

        <t>
          The client then uses this Security Context to send requests to RS using OSCORE.
        </t>

        <t>
          After sending the 2.01 (Created) response, the RS MUST set the Master Salt of the Security Context created to communicate with the client to the concatenation of salt, N1, and N2, in this order: Master Salt = salt | N1 | N2, where | denotes byte string concatenation, and where salt was received from the AS in <xref target="rs-c"/>. The RS MUST set the Master Secret, Sender ID and Recipient ID from the parameters, received from the AS and forwarded by the client in the access token in <xref target="c-rs"/> after validation of the token as specified in <xref target="rs-c"/>. The RS MUST set the AEAD Algorithm, ID Context, HKDF, and Replay Window from the parameters received from the AS and forwarded by the client in the access token in <xref target="c-rs"/> after validation of the token as specified in <xref target="rs-c"/>, if present. In case these parameters are omitted, the default values are used as described in section 3.2 of <xref target="I-D.ietf-core-object-security"/>. After that, the RS MUST derive the complete Security Context following section 3.2.1 of <xref target="I-D.ietf-core-object-security"/>, and MUST associate this Security Context with the authorization information from the access token. 
        </t>

        <t>
          The RS then uses this Security Context to verify requests and send responses to C using OSCORE. If OSCORE verification fails, error responses are used, as specified in section 8 of <xref target="I-D.ietf-core-object-security"/>. Additionally, if OSCORE verification succeeds, the verification of access rights is performed as described in section <xref target="tok-ver"/>. The RS MUST NOT use the Security Context after the related token has expired, and MUST respond with a unprotected 4.01 (Unauthorized) error message to
requests received that correspond to a Security Context with an expired
token.
        </t>

        <t>
          If the exchange was an update of access rights, i.e., a new Security Context was derived from a client that already had a Security Context in place, the is RECOMMENDED to delete the old Security Context after OSCORE verification and verification of access rights succeed. The RS MUST delete the Security Context if it deletes the access token associated to it.
        </t>

      </section> <!-- ends from line 481-->

      <section anchor="tok-ver" title="Access rights verification">

        <t>
          The RS MUST follow the procedures defined in section 5.8.2 of <xref target="I-D.ietf-ace-oauth-authz"/>: if an RS receives an OSCORE-protected request from a client, then the RS processes it according to <xref target="I-D.ietf-core-object-security"/>. If OSCORE verification succeeds, and the target resource
          requires authorization, the RS retrieves the authorization information from the access token associated to the Security Context. The RS then MUST verify that the authorization information covers the resource and the action requested.
        </t>

        <t>
         The response code MUST be 4.01 (Unauthorized) in case the client has
         not used the Security Context associated with the access token, or if RS has no valid access token for the client.  If RS has an access token for the client but
         not for the resource that was requested, RS MUST reject the request
         with a 4.03 (Forbidden).  If RS has an access token for the client
         but it does not cover the action that was requested on the resource,
         RS MUST reject the request with a 4.05 (Method Not Allowed).
        </t>

      </section>

    </section>

    <section anchor="introsp" title="Secure Communication with AS">

      <t>
        As specified in the ACE framework (section 5.7 of <xref target="I-D.ietf-ace-oauth-authz"/>), the requesting entity (RS and/or client) and the AS communicates via the introspection or token endpoint. The use of CoAP and OSCORE for this communication is RECOMMENDED in this profile, other protocols (such as HTTP and DTLS or TLS) MAY be used instead.
      </t>

      <t>
        If OSCORE is used, the requesting entity and the AS are expected to have pre-established security contexts in place.  How these security contexts are established is out of scope for this profile.  Furthermore the requesting entity and the AS communicate using OSCORE (<xref target="I-D.ietf-core-object-security"/>) through the introspection endpoint as specified in section 5.7 of <xref target="I-D.ietf-ace-oauth-authz"/> and through the token endpoint as specified in section 5.6 of <xref target="I-D.ietf-ace-oauth-authz"/>.
      </t>

    </section>

     <section anchor="sec-ctx-discard" title="Discarding the Security Context">

      <t>
        There are a number of scenarios where a client or RS needs to discard the OSCORE security context, and acquire a new one.
      </t>

      <t>
        The client MUST discard the current security context associated with an RS when:

      <list style="symbols">
        <t> the Sequence Number space ends. </t>
        <t> the access token associated with the context expires. </t>
        <t> the client receives a number of 4.01 Unauthorized responses to OSCORE requests using the same security context. The exact number needs to be specified by the application. </t>
        <t> the client receives a new nonce in the 2.01 (Created) response (see <xref target="rs-c"/>) to a POST request to the authz-info endpoint, when re-posting a non-expired token associated to the existing context. </t>
      </list>
      </t>

      <t>
        The RS MUST discard the current security context associated with a client when:

      <list style="symbols">
        <t> the Sequence Number space ends. </t>
        <t> the access token associated with the context expires. </t>
      </list>
      </t>

    </section>

    <section title="Security Considerations">

      <t>
        This document specifies a profile for the Authentication and
        Authorization for Constrained Environments (ACE) framework
        <xref target="I-D.ietf-ace-oauth-authz"/>.  Thus the general security
        considerations from the framework also apply to this profile.
      </t>

      <t>
        Furthermore the general security considerations of OSCORE <xref
        target="I-D.ietf-core-object-security"/> also apply to this specific
        use of the OSCORE protocol.
      </t>
      
      <t>
        OSCORE is designed to secure point-to-point communication,
        providing a secure binding between the request and the response(s).
        Thus the basic OSCORE protocol is not intended for use in
        point-to-multipoint communication (e.g., multicast, publish-subscribe).
        Implementers of this profile should make sure that their usecase
        corresponds to the expected use of OSCORE, to prevent weakening the
        security assurances provided by OSCORE.
      </t>
      
      <t>
        Since the use of nonces in the exchange guarantees uniqueness of AEAD keys and nonces, it is REQUIRED that nonces are not reused with the same input keying material even in case of re-boots. This document RECOMMENDS the use of 64 bit random nonces to guarantee non-reuse; if applications use something else, such as a counter, they need to guarantee that reboot and lost of state on either node does not provoke re-use. If that is not guaranteed, nodes are still susceptible to re-using AEAD nonces and keys, in case the Security Context is lost, and on-path attacker replay messages.
      </t>

      <t>
        This profile recommends that the RS maintains a single access token for a client. The use of multiple access tokens for a single client increases the strain on the resource server as it must consider every access token and calculate the actual permissions of the client. Also, tokens may contradict each other which may lead the server to enforce wrong permissions. If one of the access tokens expires earlier than others, the resulting permissions may offer insufficient protection. Developers should avoid using multiple access tokens for a client. 
      </t>
    
    </section> <!-- ends from line 518-->

    <section title="Privacy Considerations">
      <t>
        This document specifies a profile for the Authentication and
        Authorization for Constrained Environments (ACE) framework
        <xref target="I-D.ietf-ace-oauth-authz"/>.  Thus the general privacy
        considerations from the framework also apply to this profile.
      </t>
      <t>
        As this document uses OSCORE, thus the privacy considerations from
	<xref target="I-D.ietf-core-object-security"/> apply here as well.
      </t>

      <t>
      	An unprotected response to an unauthorized request may disclose information about the resource server and/or its existing relationship with the client. It is advisable to include as little information as possible in an unencrypted response. When an OSCORE Security Context already exists between the client and the resource server, more detailed information may be included.
      </t>      

      <t>
      	Note that some information might still leak after OSCORE is established, due to observable message sizes, the source, and the destination addresses.
      </t>
    </section> <!-- ends from line 539-->

    <section title=" IANA Considerations ">

       <t>Note to RFC Editor: Please replace all occurrences of "&SELF;"
      with the RFC number of this specification and delete this paragraph.</t>
   
      <section title="ACE OAuth Profile Registry">

        <t>The following registration is done for the ACE OAuth Profile
        Registry following the procedure specified in section 8.7 of <xref
        target="I-D.ietf-ace-oauth-authz"/>:</t>

        <t><?rfc subcompact="yes"?><list style='symbols'>
          <t>Profile name: coap_oscore</t>

      	  <t>Profile Description: Profile for using OSCORE to secure communication
      	between constrained nodes using the Authentication and Authorization
      	for Constrained Environments framework.</t>

      	  <t>Profile ID: TBD (value between 1 and 255)</t>
      	
      	  <t>Change Controller: IESG</t>

      	  <t>Specification Document(s): &SELF;</t>
        </list></t>

      </section>

      <section anchor="sec-ctx-params-reg" title="OSCORE Security Context Parameters Registry">
	
      <t>
          It is requested that IANA create a new registry entitled "OSCORE Security Context Parameters" registry.
          The registry is to be created as Expert Review Required.
          Guidelines for the experts is provided <xref target="review"/>.
          It should be noted that in addition to the expert review, some portions of the registry require a specification, potentially on standards track, be supplied as well.
        </t>

        <t>
          The columns of the registry are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='name'>
              The JSON name requested (e.g., "ms").
              Because a core goal of this specification is for the resulting representations to be compact, it is RECOMMENDED that the name be short.
              This name is case sensitive.
              Names may not match other registered names in a case-insensitive manner unless the Designated Experts determine that there is a compelling reason to allow an exception.
              The name is not used in the CBOR encoding.
            </t>
            <t hangText='CBOR label'>
              The value to be used to identify this algorithm.
              Map key labels MUST be unique.
              The label can be a positive integer, a negative integer or a string.
              Integer values between 0 and 255 and strings of length 1 are designated as Standards Track Document required.
              Integer values from 256 to 65535 and strings of length 2 are designated as Specification Required.
              Integer values of greater than 65535 and strings of length greater than 2 are designated as expert review.
              Integer values less than -65536 are marked as private use.
            </t>
            <t hangText='CBOR Type'>
              This field contains the CBOR type for the field.
            </t>
            <t hangText='registry'>
              This field denotes the registry that values may come from, if one exists.
            </t>
            <t hangText='description'>
              This field contains a brief description for the field.
            </t>
            <t hangText='specification'>
              This contains a pointer to the public specification for the field if one exists
            </t>
          </list>
        </t>

        <t>
          This registry will be initially populated by the values in <xref target="table-key-labels"/>.
          The specification column for all of these entries will be this document.
        </t>

      </section>

      <section title="CWT Confirmation Methods Registry">

        <t>The following registration is done for the CWT Confirmation Methods Registry following the procedure specified in section 7.2.1 of <xref target="I-D.ietf-ace-cwt-proof-of-possession"/>:</t>

        <t><?rfc subcompact="yes"?><list style='symbols'>
          <t>Confirmation Method Name: "OSCORE_Security_Context"</t>

          <t>Confirmation Method Description: OSCORE_Security_Context carrying the OSCORE Security Context parameters</t>

          <t>Confirmation Key: TBD (value between 4 and 255)</t>

          <t>Confirmation Value Type(s): map</t>
        
          <t>Change Controller: IESG</t>

          <t>Specification Document(s): <xref target="oscore-sec-ctx"/> of &SELF;</t>
        </list></t>

      </section>


      <section title="JWT Confirmation Methods Registry">

        <t>The following registration is done for the JWT Confirmation Methods Registry following the procedure specified in section 6.2.1 of <xref target="RFC7800"/>:</t>

        <t><?rfc subcompact="yes"?><list style='symbols'>
          <t>Confirmation Method Value: "osc"</t>

          <t>Confirmation Method Description: OSCORE_Security_Context carrying the OSCORE Security Context parameters</t>
        
          <t>Change Controller: IESG</t>

          <t>Specification Document(s): <xref target="oscore-sec-ctx"/> of &SELF;</t>
        </list></t>

      </section>


      <section title="Expert Review Instructions" anchor="review">
        <t>
          The IANA registry established in this document is defined to use the Expert Review registration policy.
          This section gives some general guidelines for what the experts should be looking for, but they are being designated as experts for a reason so they should be given substantial latitude.
        </t>

        <t>
          Expert reviewers should take into consideration the following points:

          <list style="symbols">
            <t>
              Point squatting should be discouraged.
              Reviewers are encouraged to get sufficient information for registration requests to ensure that the usage is not going to duplicate one that is already registered and that the point is likely to be used in deployments.
              The zones tagged as private use are intended for testing purposes and closed environments. Code points in other ranges should not be assigned for testing.
            </t>

            <t>
              Specifications are required for the standards track range of point assignment.
              Specifications should exist for specification required ranges, but early assignment before a specification is available is considered to be permissible.
              Specifications are needed for the first-come, first-serve range if they are expected to be used outside of closed environments in an interoperable way.
              When specifications are not provided, the description provided needs to have sufficient information to identify what the point is being used for.
            </t>

            <t>
              Experts should take into account the expected usage of fields when approving point assignment.
              The fact that there is a range for standards track documents does not mean that a standards track document cannot have points assigned outside of that range.
              The length of the encoded value should be weighed against how many code points of that length are left, the size of device it will be used on, and the number of code points left that encode to that size.
            </t>

          </list>
        </t>
          
      </section>

    </section> <!-- ends from line 547-->

  </middle>

  <back>

    <references title="Normative References">

      &I-D.ietf-core-object-security;
      &I-D.ietf-ace-oauth-authz;
      &I-D.ietf-ace-oauth-params;
      &RFC8392;
      &RFC2119;
      &RFC7252;
      &RFC8152;
      &RFC8174;
      &RFC8610;

    </references>

    <references title='Informative References'>
      
      <!--&I-D.gerdes-ace-dcaf-authorize;-->
      <!--&I-D.selander-ace-cose-ecdhe;-->
      &I-D.ietf-ace-cwt-proof-of-possession;
      &RFC7800;
      &RFC4949;
      &RFC6749;
      <!--&RFC7049;-->
      &RFC7231;

    </references>

    <section title="Profile Requirements">

      <t>
        This section lists the specifications on this profile based on the requirements on the framework, as requested in Appendix C of <xref target="I-D.ietf-ace-oauth-authz"/>.
      </t>

      <t>
        <list style="symbols">
          <t>(Optional) discovery process of how the client finds the right AS for an RS it wants to send a request to: Not specified
          </t>
          <t>communication protocol the client and the RS must use: CoAP
          </t>
          <t>security protocol the client and RS must use: OSCORE
          </t>
          <t>how the client and the RS mutually authenticate: Implicitly by possession of a common OSCORE security context
          </t>
          <t>Content-format of the protocol messages: "application/ace+cbor"
          </t>
          <t>proof-of-possession protocol(s) and how to select one; which key types (e.g., symmetric/asymmetric) supported: OSCORE algorithms; pre-established symmetric keys
          </t>
          <t>profile identifier: coap_oscore
          </t>
          <t>(Optional) how the RS talks to the AS for introspection: HTTP/CoAP (+ TLS/DTLS/OSCORE)
          </t>
          <t>how the client talks to the AS for requesting a token: HTTP/CoAP (+ TLS/DTLS/OSCORE)
          </t>
          <t>how/if the authz-info endpoint is protected: Security protocol above
          </t>
          <t>(Optional)other methods of token transport than the authz-info endpoint: no
          </t>
        </list>
      </t>

    </section>


<!--
    <section anchor= "oscore-edhoc" title="Using the pop-key with EDHOC (EDHOC+OSCORE)" >

      <t>
        EDHOC specifies an authenticated Diffie-Hellman protocol that allows two parties to use CBOR <xref target="RFC7049"/> and COSE in order to establish a shared secret key with perfect forward secrecy.  The use of Ephemeral Diffie-Hellman Over COSE (EDHOC) <xref target="I-D.selander-ace-cose-ecdhe"/> in this profile in addition to OSCORE, provides perfect forward secrecy (PFS) and the initial proof-of-possession, which ties the proof-of-possession key to an OSCORE security context.
      </t>

      <t>
        If EDHOC is used together with OSCORE, and the pop-key (symmetric or asymmetric) is used to authenticate the messages in EDHOC, then the AS MUST provision the following data, in response to the access token request:
      <!- - Jim: Again the symmetric key is not a POP key. - ->
      </t>

      <t>
        <list style="symbols">
          <t>a symmetric or public key (associated to the RS)</t>
          <t>a key identifier;</t>
        </list>
      </t>

      <t>
        How these parameters are communicated depends on the type of key (asymmetric or symmetric).  Moreover, the AS MUST signal the use of OSCORE + EDHOC with the 'profile' parameter set to "coap_oscore_edhoc".
      </t>

      <t>
        Note that in the case described in this section, the 'expires_in' parameter, defined in Section 4.2.2. of <xref target="RFC6749"/> defines the lifetime in seconds of both the access token and the shared secret. After expiration, C MUST acquire a new access token from the AS, and run EDHOC again, as specified in this section
      </t>

      <section anchor="edhoc-asym" title="Using Asymmetric Keys">
        
        <t>
          In case of an asymmetric key, C MUST communicate its own asymmetric key to the AS in the 'req_cnf' parameter of the access token request, as specified in Section 3.1 of <xref target="I-D.ietf-ace-oauth-params"/>; the AS MUST communicate the RS's public key to C in the response, in the 'rs_cnf' parameter, as specified in Section 3.2 of <xref target="I-D.ietf-ace-oauth-params"/>. Note that the RS's public key MUST include a 'kid' parameter, and that the value of the 'kid' MUST be included in the access token, to let the RS know which of its public keys C used.  If the access token is a CWT <xref target="RFC8392"/>, the key identifier MUST be placed directly in the 'cnf' structure (if the key is only referenced).
        <!- - TODO: check that the rs_cnf is used correctly - ->
        </t>

        <t>
          Figure 3 shows an example of such a request in CBOR diagnostic notation without tag and value abbreviations.
        </t>

<figure><artwork><![CDATA[
Header: POST (Code=0.02)
Uri-Host: "server.example.com"
Uri-Path: "token"
Content-Type: "application/cose+cbor"
Payload:
{
 "req_cnf" : {
   "COSE_Key" : {
     "kid" : "client_key"
     "kty" : "EC",
     "crv" : "P-256",
     "x" : b64'usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8',
     "y" : b64'IBOL+C3BttVivg+lSreASjpkttcsz+1rb7btKLv8EX4'
   }
 }
}

Figure 3: Example access token request (OSCORE+EDHOC, asymmetric).
]]></artwork></figure>

        <t>
          Figure 4 shows an example of a corresponding response in CBOR diagnostic notation without tag and value abbreviations.
        </t>

<figure><artwork><![CDATA[
  Header: Created (Code=2.01)
  Content-Type: "application/cose+cbor"
  Payload:
  {
    "access_token" : b64'SlAV32hkKG ...
     (contains "kid" : "client_key")',
    "profile" : "coap_oscore_edhoc",
    "expires_in" : "3600",
    "cnf" : {
      "COSE_Key" : {
        "kid" : "server_key"
        "kty" : "EC",
        "crv" : "P-256",
        "x" : b64'cGJ90UiglWiGahtagnv8usWxHK2PmfnHKwXPS54m0kT',
        "y" : b64'reASjpkttcsz+1rb7btKLv8EX4IBOL+C3BttVivg+lS'
     }
    }
  }

Figure 4: Example AS response (EDHOC+OSCORE, asymmetric).
]]></artwork></figure>

      </section> <!- - ends for line 299- ->

      <section anchor="edhoc-sym" title="Using Symmetric Keys">
        
        <t>
          In the case of a symmetric key, the AS MUST communicate the key to the client in the 'cnf' parameter of the access token response, as specified in Section 3.2. of <xref target="I-D.ietf-ace-oauth-params"/>.   The AS MUST also select a key identifier, that MUST be included as the 'kid' parameter of the COSE_key, as in figure 9 of <xref target="I-D.ietf-ace-oauth-authz"/>.
        </t>

        <t>
          Figure 5 shows an example of the necessary parameters in the AS response to the access token request when EDHOC is used.  The example uses CBOR  diagnostic notation without tag and value abbreviations.
        </t>

<figure><artwork><![CDATA[
  Header: Created (Code=2.01)
  Content-Type: "application/cose+cbor"
  Payload:
  {
    "access_token" : b64'SlAV32hkKG ...
     (remainder of access token omitted for brevity)',
    "profile" : "coap_oscore_edhoc",
    "expires_in" : "3600",
    "cnf" : {
      "COSE_Key" : {
        "kty" : "Symmetric",
        "kid" : b64'5tOS+h42dkw',
        "k" : b64'+a+Dg2jjU+eIiOFCa9lObw'
      }
    }
  }

Figure 5: Example AS response (EDHOC+OSCORE, symmetric).
]]></artwork></figure>

        <t>
          In both cases, the AS MUST also include the same key identifier as 'kid' parameter in the access token metadata. If the access token is a CWT <xref target="RFC8392"/>, the key identifier MUST be placed inside the 'cnf' claim as 'kid' parameter of the COSE_Key or directly in the 'cnf' structure (if the key is only referenced).
        </t>
        <t>
          Figure 6 shows an example CWT containing the necessary EDHOC+OSCORE parameters in the 'cnf' claim, in CBOR diagnostic notation without tag and value abbreviations.
        </t>

<figure><artwork><![CDATA[
{
  "aud" : "tempSensorInLivingRoom",
  "iat" : "1360189224",
  "exp" : "1360289224",
  "scope" :  "temperature_g firmware_p",
  "cnf" : {
    "COSE_Key" : {
      "kty" : "Symmetric",
      "kid" : b64'5tOS+h42dkw',
      "k" : b64'+a+Dg2jjU+eIiOFCa9lObw' 
  }
}

  Figure 6: Example CWT with EDHOC+OSCORE, symmetric case.
]]></artwork></figure>

        <t>
          All other parameters defining OSCORE security context are derived from EDHOC message exchange, including the master secret (see Appendix D.2 of <xref target="I-D.selander-ace-cose-ecdhe"/>).
        </t>

      </section> <!- - ends for line 361- ->

      <section anchor="edhoc-proc" title="Processing">
        
        <t>
          To provide forward secrecy and mutual authentication in the case of pre-shared keys, pre-established raw public keys or with X.509 certificates it is RECOMMENDED to use EDHOC <xref target="I-D.selander-ace-cose-ecdhe"/> to generate the keying material.  EDHOC MUST be used as defined in Appendix D of <xref target="I-D.selander-ace-cose-ecdhe"/>, with the following additions and modifications.
        </t>
        
        <t>
          The first EDHOC message is sent after the access token is posted to the authz-info endpoint of the RS as specified in Section 5.8.1 of <xref target="I-D.ietf-ace-oauth-authz"/>. Then the EDHOC message_1 is sent and the EDHOC protocol is initiated <xref target="I-D.selander-ace-cose-ecdhe"/>).
        </t>
        
        <t>
          Before the RS continues with the EDHOC protocol and responds to this token submission request, additional verifications on the access token are done: the RS SHALL process the access token according to <xref target="I-D.ietf-ace-oauth-authz"/>.  If the token is valid then the RS continues processing EDHOC following Appendix D of <xref target="I-D.selander-ace-cose-ecdhe"/>, otherwise it discontinues EDHOC and responds with the error code as specified in <xref target="I-D.ietf-ace-oauth-authz"/>.
        </t>

        <t>
          <list style="symbols">
            <t>In case the EDHOC verification fails, the RS MUST return an error response to the client with code 4.01 (Unauthorized).
            </t>
            <t>If RS has an access token for C but not for the resource that C has requested, RS MUST reject the request with a 4.03 (Forbidden).
            </t>
            <t>If RS has an access token for C but it does not cover the action C requested on the resource, RS MUST reject the request with a 4.05 (Method Not Allowed).
            </t>
            <t>If all verifications above succeeds, further communication between client and RS is protected with OSCORE, including the RS response to the OSCORE request.
            </t>
          </list>
        </t>

        <t>
          In the case of EDHOC being used with symmetric keys, the protocol in Section 5 of <xref target="I-D.selander-ace-cose-ecdhe"/> MUST be used.  If the key is asymmetric, the RS MUST also use an asymmetric key for authentication.  This key is known to the client through the access token response (see Section 5.6.2 of <xref target="I-D.ietf-ace-oauth-authz"/>).  In this case the protocol in Section 4 of <xref target="I-D.selander-ace-cose-ecdhe"/> MUST be used.
        </t>

        <t>
          Figure 7 illustrates the message exchanges for using OSCORE+EDHOC (step C in figure 1 of <xref target="I-D.ietf-ace-oauth-authz"/>).
        </t>

<figure><artwork><![CDATA[
                 Resource
        Client    Server
        |          |
        |          |
        +- - - - - - - - ->| Header: POST (Code=0.02)
        | POST     | Uri-Path:"authz-info"
        |          | Content-Type: application/cbor
        |          | Payload: access token
        |          |
        |          |
        +- - - - - - - - ->| Header: POST (Code=0.02)
        |   POST   | Uri-Path: "/.well-known/edhoc"
        |          | Content-Type: application/edhoc
        |          | Payload: EDHOC message_1
        |          |
        |<- - - - - - - - -+ Header: 2.04 Changed
        |   2.04   | Content-Type: application/edhoc
        |          | Payload: EDHOC message_2
        |          |
        +- - - - - - - - ->| Header: POST (Code=0.02)
        |   POST   | Uri-Path: "/.well-known/edhoc"
        |          | Content-Type: application/edhoc
        |          | Payload: EDHOC message_3
        |          |
        |<- - - - - - - - -+ Header: 2.04 Changed
        |   2.04   |
        |          |
 start of protected communication
        |          |
        +- - - - - - - - ->| CoAP request +
        |  OSCORE  | Object-Security option
        | request  | 
        |          |
        |<- - - - - - - - -+ CoAP response +
        |  OSCORE  | Object-Security option
        | response | 
        |          |  

Figure 7: Access token and key establishment with EDHOC
]]></artwork></figure>

<!- -
Jim: in the section above: Is there a reason for not supporting multiple edhoc negotiations w/ the same secret - it seemed to be an original mode that was supported.

where does it say that? - ->

      </section> <!- - ends for line 422- ->
    </section>
-->

    <section title="Acknowledgments" numbered='no'> 

      <t>
        The authors wish to thank Jim Schaad and Marco Tiloca for the input on this memo.
      </t>

    </section>

  </back>

</rfc>
